<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Soothsilver.Random</name>
    </assembly>
    <members>
        <member name="T:Soothsilver.Random.R">
            <summary>
            Contains static methods that produce random results.
            </summary>
        </member>
        <member name="M:Soothsilver.Random.R.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer between <paramref name="minimumInclusive"/> (inclusive) and <paramref name="maximumExclusive"/> (exclusive).
            </summary>
            <param name="minimumInclusive">The minimum integer (inclusive, this may be returned).</param>
            <param name="maximumExclusive">The maximum integer (exclusive, this cannot be returned).</param>
        </member>
        <member name="M:Soothsilver.Random.R.Next(System.Int32)">
            <summary>
            Returns a random integer between 0 (inclusive) and <paramref name="maximumExclusive"/> (exclusive).
            </summary>
            <param name="maximumExclusive">The maximum integer (exclusive, this cannot be returned).</param>
        </member>
        <member name="M:Soothsilver.Random.R.NextDouble">
            <summary>
            Returns a random double between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:Soothsilver.Random.R.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random double between <paramref name="minimum"/> and <paramref name="maximum"/>.
            </summary>
            <param name="minimum">The minimum number that may be returned.</param>
            <param name="maximum">The maximum number that may be returned.</param>
        </member>
        <member name="M:Soothsilver.Random.R.NextFloat">
            <summary>
            Returns a random float between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:Soothsilver.Random.R.NextFloat(System.Single,System.Single)">
            <summary>
            Returns a random float between <paramref name="minimum"/> and <paramref name="maximum"/>.
            </summary>
            <param name="minimum">The minimum number that may be returned.</param>
            <param name="maximum">The maximum number that may be returned.</param>
        </member>
        <member name="M:Soothsilver.Random.R.Coin">
            <summary>
            Flips a fair coin. If it falls heads, returns true; otherwise returns false.
            </summary>
        </member>
        <member name="M:Soothsilver.Random.R.PercentChance(System.Int32)">
            <summary>
            Rolls a 100-sided die. If a number comes up that's less than or equal to <paramref name="percentChance"/>, returns true; otherwise returns false.
            </summary>
            <param name="percentChance">The chance of returning true; e.g. "20" means a 20% chance.</param>
            <returns></returns>
        </member>
        <member name="M:Soothsilver.Random.R.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomizes the list so that its elements are in a random order.
            </summary>
            <typeparam name="T">Type of the list's elements.</typeparam>
            <param name="list">The list to shuffle.</param>
        </member>
        <member name="M:Soothsilver.Random.R.GetRandom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets a random element of the list.
            </summary>
            <typeparam name="T">Type of the list's elements.</typeparam>
            <param name="list">The list to get a random element from.</param>
        </member>
        <member name="M:Soothsilver.Random.R.GetRandomWithoutReplacement``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets <paramref name="numElements"/> random elements from the list, without repetition - each element will appear at most once. For efficiency, use this method when the number of elements is low compared to the size of the list.
            </summary>
            <typeparam name="T">Type of the element of the list.</typeparam>
            <param name="list">The list to take random elements from</param>
            <param name="numElements">The number of random elements to return (must be less or equal to the size of the list).</param>
        </member>
        <member name="M:Soothsilver.Random.R.GetRandomWithoutReplacementStrategy2``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets <paramref name="numElements"/> random elements from the list, without repetition - each element will appear at most once. For efficiency, use this method when the number of elements is high, such as half of the list.
            </summary>
            <typeparam name="T">Type of the element of the list.</typeparam>
            <param name="enumerable">The list to take random elements from</param>
            <param name="numElements">The number of random elements to return (must be less or equal to the size of the list).</param>
        </member>
    </members>
</doc>
